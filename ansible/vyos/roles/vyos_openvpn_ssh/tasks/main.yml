---

- name: Upgrade openvpn
  apt:
    name: openvpn
    state: latest

- name: Ensure certificate directory exists
  file:
    path: "{{ cert_dir }}"
    owner: root
    group: root
    state: directory

- name: Generate ca key
  command: openssl req -nodes -newkey rsa:{{ rsa_bits }} -keyout ca-key.pem -out ca-csr.pem -days 3650 -subj /CN=OpenVPN-CA/
  args:
    chdir: "{{ cert_dir }}"
    creates: ca-key.pem

- name: Sign ca key
  command: openssl x509 -req -in ca-csr.pem -out ca.crt -CAcreateserial -signkey ca-key.pem -sha256 -days 3650
  args:
    chdir: "{{ cert_dir }}"
    creates: ca.crt

- name: Generate server key
  command: openssl req -nodes -newkey rsa:{{ rsa_bits }} -keyout server.key -out server.csr -days 3650 -subj /CN=OpenVPN-Server/
  args:
    chdir: "{{ cert_dir }}"
    creates: server.key

- name: Set server key permissions
  file:
    path: "{{ cert_dir }}/server.key"
    owner: root
    group: root
    mode: 0400

- name: Sign server key
  command: openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca-key.pem -sha256 -days 3650 -CAcreateserial
  args:
    chdir: "{{ cert_dir }}"
    creates: server.crt

- name: Generate dhparams
  command: openssl dhparam -out {{ cert_dir }}/dh.pem {{ rsa_bits }}
  args:
    chdir: "{{ cert_dir }}"
    creates: dh.pem

- name: Generate server tls-auth key
  command: /usr/sbin/openvpn --genkey --secret {{ cert_dir }}/ta.key
  args:
    chdir: "{{ cert_dir }}"
    creates: ta.key

- name: Register server ca key
  slurp:
    src: "{{ cert_dir }}/ca.crt"
  register: ca_cert

- name: Register server tls-auth key
  slurp:
    src: "{{ cert_dir }}/ta.key"
  register: ta_key

- name: Generate client config
  template:
    src: client
    dest: "{{ cert_dir }}/client.ovpn"
    owner: root
    group: root
    mode: 0400

- name: Fetch client config
  fetch:
    src: "{{ cert_dir }}/client.ovpn"
    dest: "client/client.ovpn"
    flat: yes
